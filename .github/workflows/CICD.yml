name: cicd workflow
on:
    push:
        branches:
            - main
jobs:
    CICD:
     name: CICD
     runs-on: ubuntu-latest
     env:
      GIT_COMMIT: ${{ github.sha }}
      BUILD_ID: ${{ github.run_id }}
      APP_VERSION: 2.1.2
     steps:
         - name: Checkout
           uses: actions/checkout@v2    
         - name: build the app
           run: mvn clean deploy -Dmaven.test.skip=true
         - name: test the app
           run: mvn surefire-report:report
      
         - name: Install SonarScanner
           run: |
             wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
             unzip sonar-scanner-cli-4.8.0.2856-linux.zip
             sudo mv sonar-scanner-4.8.0.2856-linux /opt/sonar-scanner
             echo "PATH=$PATH:/opt/sonar-scanner/bin" >> $GITHUB_ENV

         - name: Run SonarScanner
           env:
              SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} #OPTIONAL
           run : sonar-scanner -Dsonar.login=$SONAR_TOKEN -Dsonar.host.url=$SONAR_HOST_URL


         - name: SonarQube Quality Gate check
           id: sonarqube-quality-gate-check
           uses: sonarsource/sonarqube-quality-gate-action@master
           with:
             pollingTimeoutSec: 600
           env:
             SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
             SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} #OPTIONAL

        # Configure JFrog CLI using the JFrog Action
         - name: Configure JFrog CLI
           uses: jfrog/setup-jfrog-cli@v2
           env:
             JF_URL: ${{ secrets.ARTIFACTORY_URL }}
             JF_ACCESS_TOKEN: ${{ secrets.ARTIFACTORY_TOKEN }}
              
     

        # Publish JAR to Artifactory
         - name: Publish JAR to Artifactory
           run: |
            echo '<--------------- Jar Publish Started --------------->'

            # Define variables
            UPLOAD_SPEC=$(cat <<EOF
            {
              "files": [
                {
                  "pattern": "jarstaging/(*)",
                  "target": "devops-java-app-libs-release/{1}",
                  "flat": "false",
                  "exclusions": ["*.sha1", "*.md5"]
                }
              ]
            }
            EOF
            )

            # Write the upload spec to a file
            echo "$UPLOAD_SPEC" > upload-spec.json

            # Upload files using JFrog CLI
            jfrog rt u --spec=upload-spec.json
            
            echo '<--------------- Jar Publish Ended --------------->'     
           # Step 2: Set up Docker Buildx (optional for multi-platform builds)
         - name: Set up Docker Buildx
           uses: docker/setup-buildx-action@v2

          # Step 3: Log in to JFrog Artifactory using the Access Token
         - name: Log in to JFrog Artifactory
           uses: docker/login-action@v2
           with:
            username: ${{secrets.JFROG_USERNAME }}
            password: ${{secrets.ARTIFACTORY_TOKEN}}  # Using Access Token as the password
            registry: ${{ secrets.ARTIFACTORY_URL }}

    # Step 4: Build the Docker image
         - name: Build Docker image
           run: |
              docker build -t ${{ secrets.JFROG_REGISTRY_URL }}/java-app-image-repo-docker/java-app:$APP_VERSION .

    # Step 5: Push the Docker image to Artifactory
         - name: Push Docker image to Artifactory
           run: |
              docker push  ${{ secrets.JFROG_REGISTRY_URL }}/java-app-image-repo-docker/java-app:$APP_VERSION

          - name: Configure AWS Credentials
            uses: aws-actions/configure-aws-credentials@v1
            with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: us-east-1

          - name: deploy to k8s
            run: |
              aws eks update-kubeconfig --region us-east-1 --name eks-cluster
              helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
              helm repo update
              helm install nginx-ingress ingress-nginx/ingress-nginx --set controller.publishService.enabled=true
              kubectl apply -f ./Manifests/



name: cicd workflow
on:
    push:
        branches:
            - main
jobs:
    CICD:
     name: CICD
     runs-on: ubuntu-latest
     env:
      GIT_COMMIT: ${{ github.sha }}
      BUILD_ID: ${{ github.run_id }}
     steps:
         - name: Checkout
           uses: actions/checkout@v2    
         - name: build the app
           run: mvn clean deploy -Dmaven.test.skip=true
         - name: test the app
           run: mvn surefire-report:report
      
         - name: Install SonarScanner
           run: |
             wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
             unzip sonar-scanner-cli-4.8.0.2856-linux.zip
             sudo mv sonar-scanner-4.8.0.2856-linux /opt/sonar-scanner
             echo "PATH=$PATH:/opt/sonar-scanner/bin" >> $GITHUB_ENV

         - name: Run SonarScanner
           env:
              SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} #OPTIONAL
           run : sonar-scanner -Dsonar.login=$SONAR_TOKEN -Dsonar.host.url=$SONAR_HOST_URL


         - name: SonarQube Quality Gate check
           id: sonarqube-quality-gate-check
           uses: sonarsource/sonarqube-quality-gate-action@master
           with:
             pollingTimeoutSec: 600
           env:
             SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
             SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} #OPTIONAL

        # Configure JFrog CLI using the JFrog Action
         - name: Configure JFrog CLI
           uses: jfrog/setup-jfrog-cli@v2
           env:
             JF_URL: ${{ secrets.ARTIFACTORY_URL }}
             JF_ACCESS_TOKEN: ${{ secrets.ARTIFACTORY_TOKEN }}
              
     

        # Publish JAR to Artifactory
         - name: Publish JAR to Artifactory
           run: |
            echo '<--------------- Jar Publish Started --------------->'

            # Define variables
            PROPERTIES="buildid=${{ github.run_id }},commitid=${{ github.sha }}"
            UPLOAD_SPEC=$(cat <<EOF
            {
              "files": [
                {
                  "pattern": "jarstaging/(*)",
                  "target": "devops-java-app-libs-release/{1}",
                  "flat": "false",
                  "props": "$PROPERTIES",
                  "exclusions": ["*.sha1", "*.md5"]
                }
              ]
            }
            EOF
            )

            # Write the upload spec to a file
            echo "$UPLOAD_SPEC" > upload-spec.json

            # Upload files using JFrog CLI
            jfrog rt u --spec=upload-spec.json
            
            echo '<--------------- Jar Publish Ended --------------->'      


